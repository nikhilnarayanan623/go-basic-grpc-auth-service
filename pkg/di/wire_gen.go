// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/nikhilnarayanan623/go-basic-grpc-auth-service/pkg/api"
	"github.com/nikhilnarayanan623/go-basic-grpc-auth-service/pkg/api/service"
	"github.com/nikhilnarayanan623/go-basic-grpc-auth-service/pkg/config"
	"github.com/nikhilnarayanan623/go-basic-grpc-auth-service/pkg/db"
	"github.com/nikhilnarayanan623/go-basic-grpc-auth-service/pkg/repository"
	"github.com/nikhilnarayanan623/go-basic-grpc-auth-service/pkg/token"
	"github.com/nikhilnarayanan623/go-basic-grpc-auth-service/pkg/usecase"
)

// Injectors from wire.go:

func InitiliazeService(cfg *config.Config) (*api.Server, error) {
	gormDB, err := db.InitializeDatabase(cfg)
	if err != nil {
		return nil, err
	}
	authRepository := repository.NewAuthRepository(gormDB)
	tokenAuth := token.NewJwtTokenAuth(cfg)
	authUseCase := usecase.NewAuthUseCase(authRepository, tokenAuth)
	serviceServer := service.NewAuthServiceServer(authUseCase)
	server, err := api.SetupAuthServer(serviceServer, cfg)
	if err != nil {
		return nil, err
	}
	return server, nil
}
